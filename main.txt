from random import *

class Maze:
    """
    Classe Labyrinthe
    Représentation sous forme de graphe non-orienté
    dont chaque sommet est une cellule (un tuple (l,c))
    et dont la structure est représentée par un dictionnaire
      - clés : sommets
      - valeurs : ensemble des sommets voisins accessibles
    """
    def __init__(self, height, width, empty):
        """
        Constructeur d'un labyrinthe de height cellules de haut
        et de width cellules de large
        Les voisinages sont initialisés à des ensembles vides
        Remarque : dans le labyrinthe créé, chaque cellule est complètement emmurée
        """
        self.height = height
        self.width = width
        self.empty = empty

        self.neighbors = {(i,j): set() for i in range(height) for j in range (width)}

        if empty :
            for i in range(self.height):
                for j in range(self.width):
                    #case en-dessous
                    if i+1 < self.height:
                        self.neighbors[(i, j)].add((i+1, j))
                        self.neighbors[(i+1, j)].add((i, j))


                    # case au-dessus
                    if i - 1 > self.height:
                        self.neighbors[(i, j)].add((i-1, j))
                        self.neighbors[(i-1, j)].add((i, j))

                    # case droite
                    if j+1 < self.width:
                        self.neighbors[(i, j)].add((i, j+1))
                        self.neighbors[(i, j+1)].add((i,j))

                    # case gauche
                    if j - 1 > self.width:
                        self.neighbors[(i, j)].add((i, j-1))
                        self.neighbors[(i, j-1)].add((i, j))





    def info(self):
        """
        Affichage des attributs d'un objet 'Maze' (fonction utile pour deboguer)
        Retour:
            chaîne (string): description textuelle des attributs de l'objet
        """
        txt = f"{self.height} x {self.width}\n"
        txt += str(self.neighbors)
        return txt

    def __str__(self):
        """
        Représentation textuelle d'un objet Maze (en utilisant des caractères ascii)
        Retour:
             chaîne (str) : chaîne de caractères représentant le labyrinthe
        """
        txt = ""
        # Première ligne
        txt += "┏"
        for j in range(self.width-1):
            txt += "━━━┳"
        txt += "━━━┓\n"
        txt += "┃"
        for j in range(self.width-1):
            txt += "   ┃" if (0,j+1) not in self.neighbors[(0,j)] else "    "
        txt += "   ┃\n"
        # Lignes normales
        for i in range(self.height-1):
            txt += "┣"
            for j in range(self.width-1):
                txt += "━━━╋" if (i+1,j) not in self.neighbors[(i,j)] else "   ╋"
            txt += "━━━┫\n" if (i+1,self.width-1) not in self.neighbors[(i,self.width-1)] else "   ┫\n"
            txt += "┃"
            for j in range(self.width):
                txt += "   ┃" if (i+1,j+1) not in self.neighbors[(i+1,j)] else "    "
            txt += "\n"
        # Bas du tableau
        txt += "┗"
        for i in range(self.width-1):
            txt += "━━━┻"
        txt += "━━━┛\n"

        return txt


    def add_wall(self,c1, c2):
        # Facultatif : on teste si les sommets sont bien dans le labyrinthe
        assert 0 <= c1[0] < self.height and \
               0 <= c1[1] < self.width and \
               0 <= c2[0] < self.height and \
               0 <= c2[1] < self.width, \
            f"Erreur lors de l'ajout d'un mur entre {c1} et {c2} : les coordonnées de sont pas compatibles avec les dimensions du labyrinthe"
        # Ajout du mur
        if c2 in self.neighbors[c1]:  # Si c2 est dans les voisins de c1
            self.neighbors[c1].remove(c2)  # on le retire
        if c1 in self.neighbors[c2]:  # Si c3 est dans les voisins de c2
            self.neighbors[c2].remove(c1)  # on le retire

    def remove_wall(self,c1, c2):
        # Facultatif : on teste si les sommets sont bien dans le labyrinthe
        assert 0 <= c1[0] < self.height and \
               0 <= c1[1] < self.width and \
               0 <= c2[0] < self.height and \
               0 <= c2[1] < self.width, \
            f"Erreur lors de l'ajout d'un mur entre {c1} et {c2} : les coordonnées de sont pas compatibles avec les dimensions du labyrinthe"
        # Suppression du mur
        if c2 not in self.neighbors[c1]:  # Si c2 n'est dans les voisins de c1
            self.neighbors[c1].add(c2)  # on l'ajoute
        if c1 not in self.neighbors[c2]:  # Si c1 n'est dans les voisins de c2
            self.neighbors[c2].add(c1)  # on l'ajoute


    def get_walls(self):
        lstWalls = []
        for i in range(self.height):
            for j in range(self.width):
                # case en-dessous
                if i + 1 < self.height and (i,j) not in self.neighbors[(i+1,j)] and (i+1,j) not in self.neighbors[(i,j)]:
                    lstWalls = lstWalls + [[(i,j),(i+1,j)]]

                # case au-dessus
                if i - 1 > self.height and (i,j) not in self.neighbors[(i-1,j)] and (i-1,j) not in self.neighbors[(i,j)]:
                    lstWalls = lstWalls + [[(i, j), (i - 1, j)]]

                # case droite
                if j + 1 < self.width and (i,j) not in self.neighbors[(i,j+1)] and (i,j+1) not in self.neighbors[(i,j)]:
                    lstWalls = lstWalls + [[(i, j), (i, j+1)]]

                # case gauche
                if j - 1 > self.width and (i,j) not in self.neighbors[(i,j-1)] and (i,j-1) not in self.neighbors[(i,j)]:
                    lstWalls = lstWalls + [[(i, j), (i, j-1)]]

        return lstWalls


    def fill(self):
        for i in range(self.height):
            for j in range(self.width):
                self.neighbors[i,j].clear()


    def emptyFunction(self):
        for i in range(self.height):
            for j in range(self.width):
                if i + 1 < self.height:
                    self.remove_wall((i,j),(i+1,j))

                # case au-dessus
                if i - 1 > self.height:
                    self.remove_wall((i, j),(i-1, j))

                # case droite
                if j + 1 < self.width:
                    self.remove_wall((i, j),(i, j+1))

                # case gauche
                if j - 1 > self.width:
                    self.remove_wall((i, j),(i, j-1))


    def get_contiguous_cells(self,c):

        lstContiguousCells = []

        if c[0] + 1 <= self.height:
            lstContiguousCells = lstContiguousCells + [(c[0] + 1,c[1])]

        # case au-dessus
        if c[0] - 1 >= self.height:
            lstContiguousCells = lstContiguousCells + [(c[0] - 1,c[1])]

        # case droite
        if c[1] + 1 <= self.width:
            lstContiguousCells = lstContiguousCells + [(c[0],c[1]+1)]

        # case gauche
        if c[1] - 1 <= self.width:
            lstContiguousCells = lstContiguousCells + [(c[0],c[1]-1)]

        return lstContiguousCells


    def get_reachable_cells(self,c):
        lstWalls = self.get_walls()
        lstContiguousCells = self.get_contiguous_cells(c)
        ind = []


        for i in range(len(lstContiguousCells)):
            temp = [c,lstContiguousCells[i]]
            temp2 = [lstContiguousCells[i], c]
            for j in range(len(lstWalls)):

                if temp == lstWalls[j] or temp2 == lstWalls[j]:
                    ind = ind + [i]

        ind = sorted(ind,reverse=True)

        for k in range(len(ind)):
            del lstContiguousCells[ind[k]]

        return lstContiguousCells


    def gen_btree(self,h,w):
        laby = Maze(h,w,empty=False)
        for i in range(h):
            for j in range(w):
                lstCoordCellule = []

                #mur sud
                if i+1 < h :
                    lstCoordCellule = lstCoordCellule + [(i+1,j)]

                #mur est
                if j+1 < w:
                    lstCoordCellule = lstCoordCellule + [(i,j+1)]

                #si jai un mur sud et un mur est ou un des deux
                if len(lstCoordCellule) > 0 :
                    if len(lstCoordCellule) == 2 :
                        temp = randint(0, 1)
                        laby.remove_wall((i,j),lstCoordCellule[temp])

                    else:
                        laby.remove_wall((i,j),lstCoordCellule[0])

        return laby


    def gen_sidewinder(self,h,w):
        laby = Maze(h, w, empty=False)
        for i in range(h-1):
            sequence = []
            for j in range(w-1):
                sequence = sequence + [(i,j)]
                temp = randint(0,1)
                if temp == 0:
                    laby.remove_wall((i,j),(i,j+1))

                else:
                    temp2 = randint(0,len(sequence)-1)
                    laby.remove_wall(sequence[temp2],(sequence[temp2][0]+1,sequence[temp2][1]))
                    sequence = []


            sequence = sequence + [(i,w-1)]
            temp3 = randint(0, len(sequence)-1)
            laby.remove_wall(sequence[temp3], (sequence[temp3][0] + 1, sequence[temp3][1]))


        for k in range(w-1):
            laby.remove_wall((h-1,k),(h-1,k+1))



        return laby


    def gen_fusion(self,h,w):
        laby = Maze(h, w, empty=False)
        test = {}
        temp = 0
        for i in range(h):
            for j in range(w):
                test.update({(i,j):temp})
                temp = temp+1
                print(test)

        return test




